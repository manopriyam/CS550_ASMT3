{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMvJyU8YmcIdOQ1ng/Jd8BF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"wbAsVsxGI6pl","executionInfo":{"status":"ok","timestamp":1725293235395,"user_tz":-330,"elapsed":844,"user":{"displayName":"MANOPRIYA MONDAL","userId":"10272260475539561592"}},"outputId":"eb79ac74-ffc4-46c9-92d8-ed2e3d63bcc3"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Iteration 1:\n","New Centroids:\n","Cluster 0: [5. 1.]\n","Cluster 1: [0.66666667 3.66666667]\n","Cluster Labels for Each Point:\n","Point [1 4] -> Cluster 1\n","Point [1 3] -> Cluster 1\n","Point [0 4] -> Cluster 1\n","Point [5 1] -> Cluster 0\n","Point [6 2] -> Cluster 0\n","Point [4 0] -> Cluster 0\n","\n","Iteration 2:\n","New Centroids:\n","Cluster 0: [5. 1.]\n","Cluster 1: [0.66666667 3.66666667]\n","Cluster Labels for Each Point:\n","Point [1 4] -> Cluster 1\n","Point [1 3] -> Cluster 1\n","Point [0 4] -> Cluster 1\n","Point [5 1] -> Cluster 0\n","Point [6 2] -> Cluster 0\n","Point [4 0] -> Cluster 0\n","Convergence reached.\n","\n","Final cluster labels:\n"," [1 1 1 0 0 0]\n","\n","Final centroids:\n"," [[5.         1.        ]\n"," [0.66666667 3.66666667]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Importing the Required Libraries\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from scipy.spatial.distance import cdist\n","from matplotlib import colors as mcolors\n","\n","# Given Data\n","data = np.array([[1, 4], [1, 3], [0, 4], [5, 1], [6, 2], [4, 0]])\n","\n","# Function to Plot the Observations\n","def plot_data(data, labels=None, centroids=None):\n","    plt.figure(figsize=(8, 6))\n","    colors = np.array(['blue', 'green'])\n","    cmap = mcolors.ListedColormap(colors)\n","    scatter = plt.scatter(data[:, 0], data[:, 1], c=labels, cmap=cmap, marker='o', s=100)\n","    if centroids is not None:\n","        plt.scatter(centroids[:, 0], centroids[:, 1], c='red', s=200, alpha=0.75, marker='x', label='Centroids')\n","    plt.xlabel('Feature 1')\n","    plt.ylabel('Feature 2')\n","    plt.title('Observations and Centroids')\n","    plt.colorbar(scatter, label='Cluster Label', ticks=[0, 1], orientation='vertical')\n","    plt.grid(True)\n","    plt.legend()\n","    plt.show()\n","\n","# Initializing Centroids\n","def initialize_centroids(data, k):\n","    np.random.seed(0)\n","    indices = np.random.choice(data.shape[0], k, replace=False)\n","    return data[indices]\n","\n","# Computing the Centroids for Each Cluster\n","def compute_centroids(data, labels, k):\n","    return np.array([data[labels == i].mean(axis=0) for i in range(k)])\n","\n","# Assigning Each Observation to the Nearest Centroid\n","def assign_labels(data, centroids):\n","    distances = cdist(data, centroids, metric='euclidean')\n","    return np.argmin(distances, axis=1)\n","\n","# K-Means Clustering Algorithm\n","def k_means(data, k, max_iters=100):\n","    # Initialize centroids\n","    centroids = initialize_centroids(data, k)\n","    # Initialize labels\n","    labels = np.zeros(data.shape[0], dtype=int)\n","\n","    for iteration in range(max_iters):\n","        # Assign clusters based on nearest centroid\n","        new_labels = assign_labels(data, centroids)\n","        # Compute new centroids\n","        new_centroids = compute_centroids(data, new_labels, k)\n","\n","        # Print current iteration results\n","        print(f\"\\nIteration {iteration + 1}:\")\n","        print(\"New Centroids:\")\n","        for i in range(k):\n","            print(f\"Cluster {i}: {new_centroids[i]}\")\n","\n","        print(\"Cluster Labels for Each Point:\")\n","        for i in range(len(data)):\n","            print(f\"Point {data[i]} -> Cluster {new_labels[i]}\")\n","\n","        # Check for convergence (if labels have not changed)\n","        if np.array_equal(labels, new_labels):\n","            print(\"Convergence reached.\")\n","            break\n","\n","        labels = new_labels\n","        centroids = new_centroids\n","\n","    return labels, centroids\n","\n","# Number of clusters\n","k = 2\n","\n","# Perform K-Means clustering\n","final_labels, final_centroids = k_means(data, k)\n","\n","# Print final results\n","print(\"\\nFinal cluster labels:\\n\", final_labels)\n","print(\"\\nFinal centroids:\\n\", final_centroids)\n","\n","# Plotting the Observations with Final Cluster Labels and Centroids\n","plot_data(data, final_labels, final_centroids)"]}]}